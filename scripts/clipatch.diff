@@
-from uberslicer.utils import load_config, colorize, print_banner, dopamine_nudge
+from uberslicer.utils import (
+    load_config,
+    colorize,
+    print_banner,
+    dopamine_nudge,
+)

@@
     status_report()
 
+@cli.command()
+@click.argument("oldfile")
+@click.option(
+    "--new",
+    "newfile",
+    required=True,
+    help="Path to the NEW version of the file you are patching",
+)
+@click.option(
+    "--reason",
+    default="File diff captured",
+    help="Short reason for this patch (shown in devlog)",
+)
+def patch(oldfile, newfile, reason):
+    """
+    Create a Dopemux **PATCH block** (schema-locked YAML) between OLDFILE and --new NEWFILE.
+    The diff lands in ``tagged/patch/`` and a devlog entry is written.
+    """
+    from uberslicer.patch import create_patch_block
+
+    create_patch_block(oldfile, newfile, reason)
+
+
+@cli.command()
+def validate():
+    """
+    Validate **all** tagged YAML blocks against the extraction schema and
+    abort if any pending PATCH blocks still carry the ``needs-review`` tag.
+    """
+    from uberslicer.validator import validate_all
+
+    validate_all()
+
+
+@cli.command()
+def doctor():
+    """
+    Run a quick sanity check on Dopemux paths, config keys, and required folders.
+    Useful when files live in mixed directories or a fresh clone looks fishy.
+    """
+    from uberslicer.doctor import run_diagnosis
+
+    run_diagnosis()
+
