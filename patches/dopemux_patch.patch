#!/usr/bin/env python3
import difflib, yaml, os, sys, pathlib, datetime, hashlib, json
from uuid import uuid4
from dopemux_utils import log_dev               # already in repo

CFG = yaml.safe_load(open("config.yaml"))["dopemux"]
PATCH_DIR = pathlib.Path(CFG["paths"]["tagged"]) / "patch"

def unified(old, new, fname):
    return "\n".join(
        difflib.unified_diff(
            old.splitlines(),
            new.splitlines(),
            fromfile=f"{fname} (old)",
            tofile=f"{fname} (new)",
            lineterm=""
        )
    )

def make_block(fname, diff_text, reason):
    now = datetime.datetime.utcnow().isoformat() + "Z"
    block = {
        "project": "dopemux",
        "session_metadata": {"timestamp": now, "source_file": fname},
        "block_id": f"patch-{uuid4()}",
        "patch_type": "file",
        "source_file": fname,
        "tags": ["patch", "needs-review"],
        "summary": reason or "File diff captured",
        "content": "|-\n" + diff_text.replace("\n", "\n  "),
        "map_refs": [],
        "decisions": [],
        "blockers": [],
        "meta_validation": [],
        "dopaminehit": [],
        "ritual_notes": f"PATCH block generated {now}"
    }
    return yaml.dump(block, sort_keys=False)

def main():
    if len(sys.argv) < 2:
        sys.exit("Usage: dopemux patch <file> [--reason '...']")
    fname = sys.argv[1]
    reason = " ".join(sys.argv[2:]).lstrip("--reason").strip() if len(sys.argv) > 2 else ""
    old = open(fname).read()
    # quick safety copy
    new_path = input("[?] Path to NEW version (leave blank to abort): ").strip()
    if not new_path:
        sys.exit("Aborted.")
    new = open(new_path).read()
    diff = unified(old, new, fname)
    if not diff:
        sys.exit("[OK] No changes detected.")
    PATCH_DIR.mkdir(parents=True, exist_ok=True)
    outfile = PATCH_DIR / f"{pathlib.Path(fname).stem}_{uuid4()}.yaml"
    outfile.write_text(make_block(fname, diff, reason))
    # log dev event
    log_dev({"timestamp": datetime.datetime.utcnow().isoformat()+"Z",
             "action": "patch_created",
             "file": str(outfile),
             "source": fname})
    print(f"[OK] PATCH block saved â†’ {outfile}")

if __name__ == "__main__":
    main()
